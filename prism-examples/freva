dtmc

module freivalds

    // Phase: 0 = init, 1 = compute, 2 = compare, 3 = done
    phase : [0..3] init 0;

    // Random vector r of size 2
    r0 : [0..1] init 0;
    r1 : [0..1] init 0;

    // Result of A*(B*r) and C*r
    axbr0 : [0..20] init 0;
    axbr1 : [0..20] init 0;
    cr0   : [0..20] init 0;
    cr1   : [0..20] init 0;

    // Result flag: 1 = correct match, 0 = mismatch
    result : [0..1] init 0;

    // Step 1: Sample random vector
    [] phase=0 ->
        0.25 : (r0'=0) & (r1'=0) & (phase'=1) +
        0.25 : (r0'=0) & (r1'=1) & (phase'=1) +
        0.25 : (r0'=1) & (r1'=0) & (phase'=1) +
        0.25 : (r0'=1) & (r1'=1) & (phase'=1);

    // Step 2: Compute matrix products manually
    // A = [[1,2],[3,4]], B = I, C = [[1,2],[1,4]] (incorrect)
    [] phase=1 ->
        // B*r = r so skip
        // A*(B*r) = A*r
        // axbr[0] = 1*r0 + 2*r1
        // axbr[1] = 3*r0 + 4*r1
        // cr[0] = 1*r0 + 2*r1 (same)
        // cr[1] = 1*r0 + 4*r1 (different when r0=1 && r1=0)

        (axbr0'=1*r0 + 2*r1) &
        (axbr1'=3*r0 + 4*r1) &
        (cr0'=1*r0 + 2*r1) &
        (cr1'=1*r0 + 4*r1) &
        (phase'=2);

    // Step 3: Compare results
    [] phase=2 ->
        (result'= (axbr0=cr0 & axbr1=cr1 ? 1 : 0)) & (phase'=3);

endmodule
